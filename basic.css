/* 1. comments 
    we can use comment to declare our indentation and it also help us iff we want to that code
    in later dates.
*/

/* 2. Where to insert CSS
    three ways:-
        1.External CSS:   - create css file outside and insert that into html doc via <script> tag.
        2.Internal CSS:- inside <head> section with <style> tag.
        3.Inline CSS:- to stylize any individual tag, does not require any spacial tag.
*/

/* 3. Syntax
    any CSS syntax comprised of selector and declaration block
    selector targets the elements we want to style,
    declaration block is warped in { }
        in that we have css declarations
        Each declaration includes a CSS property name and a value, separated by a colon.
        for example, width: 200px;
*/

/* 4. Selectors
    we have five categories of selectors:
        1. Simple selector(elements based on name, id. class)
            1.element
                h1{}
                p{}
            2.id
                #name_of_id{}
                #blue{}
                #redBox{}
            3.class
                .class_name{}
                .leftHeader{}
                .roller{}
        2. Combinator selectors

        3. Pseudo-class selectors

        4.Pseudo-elements selectors

        5.Attribute selectors

*/
h2{
    color: goldenrod;
}
#paragraphid{
    color: green;
    font-size: larger;
}
.classstyle{
    color: aqua;
}

/* 5.Colors
    they are specified using Predefined color name, or RGB, HEX, HSL, RGBA, HSLA values. 
*/
h1#color1{
    color: blue;
}
h1#rgb{
    color: rgb(10, 200, 0);
}
h1#hex{
    color: #ff55ff;
}
h1#hsl{
color: hsl(10, 10, 100);}

/* 6.Backgrounds
    background properties are used to add various background effects for elements.    
*/
h1#background{
    background-color: #ff55ff;
    background: fixed;
    background-image: none;
    background-position: ;
    background-repeat: no-repeat;
}

/* 7. Borders
    Border properties allow us to specify the style, width and color elements border.
        1.dotted - Defines a dotted border
        2.dashed - Defines a dashed border
        3.solid - Defines a solid border
        4.double - Defines a double border
        5.groove - Defines a 3D grooved border.  The effect depends on the border-color value
        6.ridge - Defines a 3D ridged border.  The effect depends on the border-color value
        7.inset - Defines a 3D inset border.  The effect depends on the border-color value
        8.outset - Defines a 3D outset border.  The effect depends on the border-color value
        9.none - Defines no border
        10.hidden - Defines a hidden border
*/
p#borders1{
    border-style: dashed;
}
p#borders2{
    border-style: dotted;
}
p#borders3{
    border-style: double;
}
p#borders4{
    border-style: groove;
    border-color: tomato;
}
p#borders5{
    border-style: hidden;
    border-color: tomato;
}
p#borders6{
    border-style: inherit;
}
p#borders7{
    border-style: initial;
}
p#borders8{
    border-style: inset;
    border-color: tomato;
}
p#borders9{
    border-style: outset;
    border-color: tomato;
}
p#borders10{
    border-style: ridge;
    border-color: tomato;
}

/* 8. Margins
        a margin is the space around an element’s border
    Put another way, the margin property controls the space outside an element
    the margin “pushes away” its neighbors elements.
    All margin properties can have the following values:
        auto - the browser calculates the Margins
        length - specifies a margin in px, pt, cm
        % - specifies a margin in % of the width of the containing element
        inherit - specifies that the margin should be inherited from the parent element
            margin-top
            margin-right
            margin-bottom
            margin-left
*/
.margin{
    background-color: black;
    height: 500px;
    width: 500px;
    margin-top: 50px;
    margin-bottom: 50px;
    margin-left: 200px;
    margin-right: 50px;
}

/* 9. Padding
        padding is the space between an element’s border and the element’s content
    the padding property controls the space inside an element.
    padding is located inside the border of an element.
        To create the gap, the padding either grows the element’s size or shrinks the content inside. 
    By default, the size of the element increases. If you want to create the gap by shrinking the content, set the box-sizing 
    property to border-box (i.e. box-sizing: border-box).
        padding-top
        padding-right
        padding-bottom
        padding-left
*/
.padding{
    background-color: black;
    height: 500px;
    width: 500px;
    padding-left: 0px;
    padding-top: 200px;
    padding-right: 100px;
    padding-bottom: 20px;
}

/* 10. height and width
    The CSS height and width properties are used to set the height and width of an element.
    i.e.To add an image in an HTML page, <img> tag is used. With that, we need to use the attributes 
    height and width to set the height and width of the image in pixels.
        length - Defines the height/width in px, cm.
        % - Defines the height/width in percent of the containing block.
        initial - Sets the height/width to its default value.
        inherit - The height/width will be inherited from its parent value.
*/
.hw{
    background-color: black;
    height: 500px;
    width: 500px;
}

/* 11. Box Model
    In CSS, the term "box model" is used when talking about design and layout.
        The CSS box model is essentially a box that wraps around every HTML element.
    It consists of: margins, borders, padding, and the actual content.
    Explanation of different parts in Box Model:
        Content - The content of the box, where text and images appear
        Padding - Clears an area around the content.  The padding is transparent
        Border - A border that goes around the padding and content
        Margin - Clears an area out the border. The margin is transparent
        The box model allows us to add a border around elements and to define space between elements
*/
.boxmodel{
    height: 500px;
    width: 500px;
    border: 5px solid lime;
    padding: 100px;
    margin: 100px;

}

/* 12. Outline
   it is a line that is drawn around elements, OUTSIDE the border, to make the element "stand out" 
   outside of border
*/
p.outline{
    border-style: double;
    outline-style: dashed;
}

/* 13. Text
    CSS has a lot of properties for formatting text.
*/
h1.text{
    color: blue;
    text-align: center;
    text-decoration: underline;
    text-transform: capitalize;
}

/* 14. Fonts
        In CSS, we use the font-family property to specify the font of a text.
        we only want Global font family for website.
    The font-family property should hold several font names as a "fallback" system, to ensure maximum compatibility between
    browsers/operating systems.  Start with the font you want, and end with a generic family (to let the browser pick a similar
    font in the generic family, if no other fonts are available).  The font names should be separated with a comma.
*/
body{
    /* font-family: sans-serif, monospace ; */
    font-family: 'Roboto', sans-serif;

}
p.font1{
    font-family: cursive;
}

/* 15. Icons
    Icons can easily be added to your HTML page, by using an icon library.
    How to Add Icons
        The simplest way to add an icon to your HTML page, is with an icon library, such as Font Awesome.
        Add the name of the specified icon class to any inline HTML element (like <i> or <span>)
        All the icons in the icon libraries, are scalable vectors that can be customized with CSS (size, color, shadow)
*/

/* 16. Links
    Links can be styled with any CSS property.
    In addition, links can be styled differently depending on what state they are in.
    The four link states are:
        a:link - a normal, unvisited link
        a:visited - a link the user has visited
        a:hover - a link when the user mouses over it
        a:active - a link the moment it is clicked
*/
a:link{
    color: green;
}
a:visited{
    color: grey;
}
a:hover{
    color: red;
}
a:active{
    color: orange;
}

/* 17. Lists
    The list-style-type property specifies the type of list item marker.
*/
ul{
    list-style-type: circle;
}
ol{
    list-style-type: lower-roman;
}

/* 18. Tables
    how make content in middle?
*/
table, tr, td{
    border: 2px solid black;
    width: 100%;
}

/* 19. Display
    The display property specifies if or how an element can be displayed.
    Every HTML element has a default value depending on what type of element it is.
        The default display value for most elements is block or inline. 
    Explore other properties......
*/
li.display1{
    display: block;
}
p.dis1{
    display: block;
}
/* 20. Max-Width

*/
.max{
    width: 800px;
    margin: auto;
    border: 3px solid black;
}

/* 21. Position
    The position property specifies the type of positioning method used for an element 
        static
        relative
        fixed
        absolute
        sticky
*/
.static{
    width: 500px;
    height: 500px;
    background: lime;
    position: static;
    border: 2.5px solid black;
}
.relative{
    width: 500px;
    height: 500px;
    background: rgb(255, 115, 0);
    position: relative;
    left: 50px;
    border: 2.5px solid black;
}
.fixed{
    width: 75px;
    height: 75px;
    background: rgb(0, 89, 255);
    position: fixed;
    bottom: 0;
    right: 0;
    border: 2.5px solid black;
}
.absolute{
    width: 500px;
    height: 500px;
    background-color: rgb(132, 0, 255);
    position: absolute;
    right: 10px;
    border: 2.5px solid black;
}
.sticky{
    width: 500px;
    height: 500px;
    background-color: rgb(255, 0, 21);
    /* position: sticky; */
    top: 80px;
    left: 600px;
    border: 2.5px solid black;
}
.overlap{
    width: 500px;
    height: 500px;
    background: black;
    z-index: -2;
}

/* 22. Overflow
    The overflow property specifies whether to clip the content or to add scrollbar 
    when the content of an element is too big to fit in the specified area.
    The overflow property has the following values:
        visible - Default The overflow is not clipped.  The content renders outside the elements box.
        hidden - The overflow is clipped and the rest of content will be invisible.
        scroll - The overflow is clipped, and a scrollbar is added to see the rest of the content.
*/
.overflow{
    width: 300px;
    height: 300px;
    background: rgba(245, 220, 1, 0.308);
    border: 2.5px solid black;
    overflow: scroll ;
}

/* 23. Float 
    The CSS float property specifies how an element should float.
    The CSS clear property specifies what elements can float beside 
    the cleared element and on which side.
*/
.float1{
    width: 500px;
    height: 100px;
    background: tomato;
    border: 2.5px solid black;
    float: right;
}
.float2{
    width: 500px;
    height: 100px;
    background: tomato;
    border: 2.5px solid black;
    float: left;
}
.float3{
    width: 500px;
    height: 100px;
    background: tomato;
    border: 2.5px solid black;
    float: none;
}
.float4{
    width: 500px;
    height: 100px;
    background: tomato;
    border: 2.5px solid black;
    float: inline-end;
}

/* 24. Inline-Block
    Compared to display: inline, the major difference is that display: inline-block allows to set a width and height on the element.
    Also, with display: inline-block, the top and bottom margins/paddings are respected, but with display: inline they are not.
    Compared to display: block, the major difference is that display: inline-block does not add a line-break after the element, so
    the element can sit next to other elements.
*/
.a{
    display: inline;
    width: 100px;
    height: 100px;
    padding: 10px;
    border: 2px solid blue;
    background: yellow;
}
.b{
    display: inline-block;
    width: 100px;
    height: 100px;
    padding: 5px;
    border: 1px solid black;
    background: #ff55ff;
}
.c{
    display: block;
    width: 100px;
    height: 100px;
    padding: 5px;
    border: 1px solid black;
    background: #07e425;
}

/*  25. Align
    Use CSS to align the content
*/
.align{
    width: 50%;
    height: 500px;
    background: maroon;
    border: 2px solid yellowgreen;
    margin: auto;

}

/*  26. Combinator
    A combinator is something that explains the relationship between the selectors.
    A CSS selector can contain more than one simple selector.  Between the simple selectors,
    we can include a combinator.
    There are four different combinator in CSS:
        1. descendant selector (space)
        2. child selector (>)
        3. adjacent sibling selector (+)
        4. general sibling selector (~)
*/

/*  27. Pseudo Class
    Pseudo-classes can be combined with CSS classes.
*/

/*  28. Pseudo element
    A CSS pseudo-element is used to style specified parts of an element.
*/

/* 29. Opacity
    The opacity property specifies the opacity/ transparency of an element
*/

/* 30. Navigation Bar
    Use CSS to create Navigation Bar
*/

/* 31. Dropdown
    Use CSS to create a dropdown
*/

/* 32. Image Gallery
    CSS can be used to create an image gallery
*/

/* 33. Image Sprites
    An image sprite is a collection of images put into a single image.
    A web page with many images can take a long time to load and generates multiple server requests.
    Using image sprite will reduce the number of server requests and save bandwidth.
*/

/* 34. Attr Selectors
    The [attribute] selector is used to select elements with a specified attribute.
*/

/* 36. Counters
    CSS counters are "variables" maintained by CSS whose values can be incremented by CSS rules.
    Counters let you adjust the appearance of content based on its placement in the document.
*/

/* 37. Website Layout
    A website is often divided into headers, menus, content and a footer.
    Header - A header is usually located at the top of the website.
    Navigation Bar - A navigation bar contains a  list of links to help visitors navigating through your website.
    Check Project Files for Website Layout Example.
*/

/* 38. Units
    CSS has several different units for expressing a length.
    Many CSS properties take "length" values, such as width, margin, padding, font-size
    Length is a number followed by a length unit, such as 10px, 2em.
*/

/* 39. Specificity
    If there are two or more conflicting CSS rules that point to the same element, the browser follows some rule to determine
    which one is most specific and therefore wins out.
    Think of specificity as a score/rank that determines which style declarations are ultimately applied to an element.
    The universal selector (*) has low specificity, while ID selectors are highly specific!
    Every selector has its place in the specificity hierarchy.  There are four categories which define the specificity level of a selector:
    Inline Styles - An inline style is attached directly to the element to be styled.
    IDs - An ID is a unique identifier for the page elements, such as #navbar.
    Classes, attributes and pseudo-classes - This category includes .classes, [attributes] and pseudo-classes such as :hover, :focus
    Elements and pseudo-elements - This category includes element names and pseudo-elements, such as h1, div, :before and :after.
*/

/* 40. !important
    The !important rule in CSS is used to add more importance to a property value than normal.
    In face, if you use the !important rule, it will override ALL previous styling rules for that
    specific property on that element!
*/