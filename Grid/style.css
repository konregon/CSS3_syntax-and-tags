.grid-container{
    display: grid;
    /* row-gap: 50px;
    column-gap: 50px; */
    gap: 50px 50px;
    grid-template-columns: auto auto auto;
    background: lightblue;
    padding: 10px;
}

.grid-items{
    background: dodgerblue;
    border: 1px solid black;
    padding: 20px;
    font-size: 30px;
    text-align: center;
}

/*  Grid Container
The grid-template-columns property defines the number of columns in your grid layout, and it can define the width of each column.
The value is a space-separated-list, where each value defines the width of the respective column.
If you want your grid layout to contain 4 columns, specify the width of the 4 columns, or "auto" if all columns should have the same width.
*/
.grid-container2{
    display: grid;
    gap: 20px;
    grid-template-columns: auto auto auto;
    grid-template-rows: 80px 120px 200px;
    background: lightblue;
    padding: 10px;
}
.grid-container2 .grid-items{
    background: dodgerblue;
    border: 1px solid black;
    padding: 20px;
    font-size: 30px;
    text-align: center;
}

/*  grid items
A grid container contains grid items.
By default, a container has one grid item for each column, in each row, but you can style the grid items so that they will span multiple columns and/or rows.
*/
.grid-container3{
    display: grid;
    gap: 20px;
    grid-template-columns: auto auto auto;
    grid-template-rows: 80px 120px 80px;
    background: lightblue;
    padding: 10px;
}
.grid-container3 .grid-items{
    grid-column: 1/3;
    background: dodgerblue;
    border: 1px solid black;
    padding: 20px;
    font-size: 30px;
    text-align: center;
}